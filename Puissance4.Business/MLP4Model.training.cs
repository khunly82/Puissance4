// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML.Trainers.LightGbm;
using Microsoft.ML;

namespace Puissance4.Business
{
    public partial class MLP4Model
    {
        public const string RetrainFilePath =  @"C:\Users\K\Desktop\Puissance4\Puissance4.Business\Data\games.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }



        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }


        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Pos01", @"Pos01"),new InputOutputColumnPair(@"Pos02", @"Pos02"),new InputOutputColumnPair(@"Pos03", @"Pos03"),new InputOutputColumnPair(@"Pos04", @"Pos04"),new InputOutputColumnPair(@"Pos05", @"Pos05"),new InputOutputColumnPair(@"Pos06", @"Pos06"),new InputOutputColumnPair(@"Pos07", @"Pos07"),new InputOutputColumnPair(@"Pos08", @"Pos08"),new InputOutputColumnPair(@"Pos09", @"Pos09"),new InputOutputColumnPair(@"Pos10", @"Pos10"),new InputOutputColumnPair(@"Pos11", @"Pos11"),new InputOutputColumnPair(@"Pos12", @"Pos12"),new InputOutputColumnPair(@"Pos13", @"Pos13"),new InputOutputColumnPair(@"Pos14", @"Pos14"),new InputOutputColumnPair(@"Pos15", @"Pos15"),new InputOutputColumnPair(@"Pos16", @"Pos16"),new InputOutputColumnPair(@"Pos17", @"Pos17"),new InputOutputColumnPair(@"Pos18", @"Pos18"),new InputOutputColumnPair(@"Pos19", @"Pos19"),new InputOutputColumnPair(@"Pos20", @"Pos20"),new InputOutputColumnPair(@"Pos21", @"Pos21"),new InputOutputColumnPair(@"Pos22", @"Pos22"),new InputOutputColumnPair(@"Pos23", @"Pos23"),new InputOutputColumnPair(@"Pos24", @"Pos24"),new InputOutputColumnPair(@"Pos25", @"Pos25"),new InputOutputColumnPair(@"Pos26", @"Pos26"),new InputOutputColumnPair(@"Pos27", @"Pos27"),new InputOutputColumnPair(@"Pos28", @"Pos28"),new InputOutputColumnPair(@"Pos29", @"Pos29"),new InputOutputColumnPair(@"Pos30", @"Pos30"),new InputOutputColumnPair(@"Pos31", @"Pos31"),new InputOutputColumnPair(@"Pos32", @"Pos32"),new InputOutputColumnPair(@"Pos33", @"Pos33"),new InputOutputColumnPair(@"Pos34", @"Pos34"),new InputOutputColumnPair(@"Pos35", @"Pos35"),new InputOutputColumnPair(@"Pos36", @"Pos36"),new InputOutputColumnPair(@"Pos37", @"Pos37"),new InputOutputColumnPair(@"Pos38", @"Pos38"),new InputOutputColumnPair(@"Pos39", @"Pos39"),new InputOutputColumnPair(@"Pos40", @"Pos40"),new InputOutputColumnPair(@"Pos41", @"Pos41"),new InputOutputColumnPair(@"Pos42", @"Pos42")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Pos01",@"Pos02",@"Pos03",@"Pos04",@"Pos05",@"Pos06",@"Pos07",@"Pos08",@"Pos09",@"Pos10",@"Pos11",@"Pos12",@"Pos13",@"Pos14",@"Pos15",@"Pos16",@"Pos17",@"Pos18",@"Pos19",@"Pos20",@"Pos21",@"Pos22",@"Pos23",@"Pos24",@"Pos25",@"Pos26",@"Pos27",@"Pos28",@"Pos29",@"Pos30",@"Pos31",@"Pos32",@"Pos33",@"Pos34",@"Pos35",@"Pos36",@"Pos37",@"Pos38",@"Pos39",@"Pos40",@"Pos41",@"Pos42"}))      
                                    .Append(mlContext.Regression.Trainers.LightGbm(new LightGbmRegressionTrainer.Options(){NumberOfLeaves=1813,NumberOfIterations=2951,MinimumExampleCountPerLeaf=20,LearningRate=0.00510514282807363,LabelColumnName=@"Winner",FeatureColumnName=@"Features",ExampleWeightColumnName=null,Booster=new GradientBooster.Options(){SubsampleFraction=0.000342806385778563,FeatureFraction=0.882953092347604,L1Regularization=1.82192830144194E-07,L2Regularization=0.0565966292155663},MaximumBinCountPerFeature=1023}));

            return pipeline;
        }
    }
 }
